<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>云计算</title>
    <url>/2023/06/04/%E4%BA%91%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h4 id="云计算的公共特征："><a href="#云计算的公共特征：" class="headerlink" title="云计算的公共特征："></a>云计算的公共特征：</h4><p>1．弹性伸缩 2．快速部署 3．资源抽象 4．按用量收费 5．宽带访问</p>
<h4 id="云计算的分类："><a href="#云计算的分类：" class="headerlink" title="云计算的分类："></a>云计算的分类：</h4><p>1、根据云的部署模式和云的使用范围进行分类：</p>
<p>（1）公共云（2）私有云（或称专属云）（3）社区云（4）混合云（5）行业云（6）其他云类型</p>
<p>2、针对云计算的服务层次和服务类型进行分类：</p>
<p>（1）基础设施即服务（Infrastructure as a Service，IaaS）</p>
<p>（2）平台即服务（Platform as a Service，PaaS）</p>
<p>（3）软件即服务（Software as a Service，SaaS）</p>
<h4 id="分布式计算一般分为以下几步："><a href="#分布式计算一般分为以下几步：" class="headerlink" title="分布式计算一般分为以下几步："></a>分布式计算一般分为以下几步：</h4><p>1．设计分布式计算模型</p>
<p>首先要规定分布式系统的计算模型。计算模型决定了系统中各个组件应该如何运行，组件之间应该如何进行消息通信，组件和节点应该如何管理等。</p>
<p>2．分布式任务分配</p>
<p>分布式算法不同于普通算法。普通算法通常是按部就班，一步接一步完成任务。而分布式计算中计算任务是分摊到各个节点上的。该算法着重解决的是能否分配任务，或如何分配任务的问题。</p>
<p>3．编写并执行分布式程序</p>
<p>使用特定的分布式计算框架与计算模型，将分布式算法转化并实现，并尽量保证整个集群的高效运行。</p>
<p>难点：</p>
<p>（1）计算任务的划分</p>
<p>（2）多节点之间的通信方式</p>
<h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h4><p>****一致性****指更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。</p>
<p>****可用性****，即服务一直可用，而且是在正常的响应时间内。对于一个可用性的分布式系统，每一个非故障的节点必须对每一个请求作出响应。也就是该系统使用的任何算法必须最终终止。</p>
<p>****分区容错性****指分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p>
<p>ACID是数据库事务正常执行的四个原则，分别指原子性、一致性、独立性及持久性。</p>
<h4 id="五层云栈模型"><a href="#五层云栈模型" class="headerlink" title="五层云栈模型"></a>五层云栈模型</h4><p>第一层：固件&#x2F;硬件层</p>
<p>第二层：软件内核层</p>
<p>第三层：云基本资源层</p>
<p>第四层：云软件环境层</p>
<p>第五层：云应用程序层</p>
<h5 id="如何理解“云栈”和“云体”的概念？"><a href="#如何理解“云栈”和“云体”的概念？" class="headerlink" title="如何理解“云栈”和“云体”的概念？"></a>如何理解“云栈”和“云体”的概念？</h5><p>云体是云计算的物质基础，是云计算所用到的资源集合。它是构成云计算的软硬件环境，</p>
<p>云栈又称云平台，是在云上面建造的运行环境。</p>
<h4 id="Hadoop概念"><a href="#Hadoop概念" class="headerlink" title="Hadoop概念"></a>Hadoop概念</h4><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节 的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop实现了一个分布式文件系统），其中一个组件是HDFS。HDFS有高容错性的特点， 并且设计用来部署在低廉的硬件上；而且它提供高吞吐量来访问应用程序的数据，适合那些有着超大数据集的应用程序。</p>
<p>Hadoop的框架最核心的设计就是：HDFS 和 MapReduce。HDFS为海量的数据提供了存储，而MapReduce则为海量的数据提供了计算。</p>
<h5 id="hadoop的优势"><a href="#hadoop的优势" class="headerlink" title="hadoop的优势"></a>hadoop的优势</h5><p>方便——-&gt;不需要昂贵和高可靠的硬件资源，商用资源即可 </p>
<p>弹性———&gt;集群节点很容易扩展或卸载 </p>
<p>健壮———-&gt;故障检测和自动恢复 </p>
<p>简单———–&gt;用户可以快速编写出高效的并行分布代码 </p>
<h5 id="hadoop的三种启动模式"><a href="#hadoop的三种启动模式" class="headerlink" title="hadoop的三种启动模式"></a>hadoop的三种启动模式</h5><p>独立模式（local或Standalone Mode),默认情况下，hadoop即处于该模式，用于开发和调试。 </p>
<p>伪分布模式(Pseudo-Distributed Mode) Hadoop的守护进程运行在本机机器，模拟一个小规模的集群 </p>
<p>全分布模式(Fully-Distributed Mode)Hadoop的守护进程运行在一个集群上</p>
<h5 id="Hadoop平台搭建流程"><a href="#Hadoop平台搭建流程" class="headerlink" title="Hadoop平台搭建流程"></a>Hadoop平台搭建流程</h5><p>安装虚拟机Linux和java</p>
<p>安装jdk和Hadoop软件</p>
<p>完成免密登录操作</p>
<p>配置Hadoop平台相关文件</p>
<p>格式化文件系统</p>
<p>启动Hadoop平台</p>
<h4 id="HDFS分布式文件系统"><a href="#HDFS分布式文件系统" class="headerlink" title="HDFS分布式文件系统"></a>HDFS分布式文件系统</h4><p>NameNode是整个集群的管理者。</p>
<p>DataNode是实际的数据存储节点，负责相应NameNode创建、删除和复制块的命令。</p>
<p>NameNode会读取来自DataNode的心跳信息，以此判断DataNode是否存活。同一份数据会以多份副本存储在不同的DataNode上，一旦某一个DataNode宕机，NameNode会立即采取手段来处理问题。</p>
<p>Secondary NameNo0de是NameNode的备份节点，HDFS会将NameNode的数据实时备份到Secondary NameNode上，当NameNode宕机需要重启时，则可以利用Secondary NameNode中的数据加快NameNode的重启恢复速度。</p>
<p>MapReduce既是Hadoop中的模块，也是一个计算模型。</p>
<h4 id="HDFS-client-客户端"><a href="#HDFS-client-客户端" class="headerlink" title="HDFS client 客户端"></a>HDFS client 客户端</h4><p>文件切分：文件上传 HDFS 的时候,Client 将文件切分成 一个一个的Block,然后进行存储。 </p>
<p>与 NameNode 交互,获取文件的位置信息 ；与 DataNode 交互,读取或者写入数据 </p>
<p>Client 提供一些命令来管理 和访问HDFS,比如启动或者关闭HDFS。</p>
<h4 id="NameNode主节点"><a href="#NameNode主节点" class="headerlink" title="NameNode主节点"></a>NameNode主节点</h4><p>管理 HDFS 的名称空间 管理数据块(Block)映射信息 配置副本策略 处理客户端读写请求 </p>
<p>维护着文件系统树中所有文件和目录的元数据 </p>
<p>整个HDFS可存储的文件数受限于NameNode的内存大小</p>
<p>NameNode负责文件元数据的操作 ,DataNode负责处理文件内容的读写请求,数据流不经过NameNode,会 询问它跟那个DataNode联系。 </p>
<p>全权管理数据块的复制,周期性的接受心跳和块的状态报告信息</p>
<h4 id="DataNode作用"><a href="#DataNode作用" class="headerlink" title="DataNode作用"></a>DataNode作用</h4><p>提供真实文件数据的存储服务。 </p>
<p>DataNode以数据块的形式存储HDFS文件DataNode 响应HDFS 客户端读写请求 </p>
<p>DataNode 周期性向NameNode汇报心跳信息、数据块信息 、缓存数据块信息</p>
<h4 id="主要用到的类或者接口："><a href="#主要用到的类或者接口：" class="headerlink" title="主要用到的类或者接口："></a>主要用到的类或者接口：</h4><p>Configuration：封装了关于Hadoop的所有配置信息； </p>
<p>FileSystem：封装了HDFS集群的整个文件系统状态；</p>
<p>Path：封装了HDFS集群中文件(目录)的路径； </p>
<p>FSDataInputStream：用于读取HDFS集群文件的输入流； </p>
<p>FSDataOutputStream：用于将数据写入到HDFS集群文件中的输出流；</p>
<h4 id="单点失效问题"><a href="#单点失效问题" class="headerlink" title="单点失效问题"></a>单点失效问题</h4><p> 如果NameNode失效，那么客户端或MapReduce作业均将无法读写查看文件 </p>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>1.启动一个拥有文件系统元数据的新NameNode(时间长) </p>
<p>2.配置一对活动-备用(Active-Standby)NameNode,活动NameNode失效时，备用 NameNode立即接管，用户不会有明显中断感觉 </p>
<p>3.共享编辑日志文件（借助NFS、zookeeper等） </p>
<p>4.DataNode同时向两个NameNode汇报数据块信息 </p>
<p>5.客户端采用特定机制处理NameNode失效问题，该机制对用户透明</p>
<h4 id="Hadoop序列化机制"><a href="#Hadoop序列化机制" class="headerlink" title="Hadoop序列化机制"></a>Hadoop序列化机制</h4><p>原因</p>
<p>(1)Java序列化会附带额外的信息，浪费带宽资源</p>
<p>(2) Java反序列化，会不断创建新的对象，无法实现对象共享</p>
<p>(3) Hadoop处理大文件的特征决定</p>
<p>方法</p>
<p>Hadoop Writable机制</p>
<p>Hadoop序列化框架</p>
]]></content>
      <tags>
        <tag>元计算</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/06/19/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>#知识点：</p>
<p>1、打点-Web架构-语言&amp;中间件&amp;数据库&amp;系统等</p>
<p>2、打点-Web源码-CMS开源&amp;闭源售卖&amp;自主研发等</p>
<p>3、打点-Web源码获取-泄露安全&amp;资源监控&amp;其他等</p>
<p>4、打点-Web域名-子域名&amp;相似域名&amp;反查域名&amp;旁注等</p>
<p>#信息点：</p>
<p>基础信息，系统信息，应用信息，防护信息，人员信息，其他信息等</p>
<p>#技术点：</p>
<p>CMS识别，端口扫描，CDN绕过，源码获取，子域名查询，WAF识别，负载均衡识别等</p>
<p>web源码：互站网 fofa搜**源码</p>
<p>一个网站多个域名</p>
<p>备案查询</p>
<p>源码泄漏集合：</p>
<p>composer.json</p>
<p>git源码泄露</p>
<p>svn源码泄露</p>
<p>hg源码泄漏</p>
<p>网站备份压缩文件</p>
<p>WEB-INF&#x2F;web.xml 泄露</p>
<p>DS_Store 文件泄露</p>
<p>SWP 文件泄露</p>
<p>CVS泄露</p>
<p>Bzr泄露</p>
<p>GitHub源码泄漏</p>
<p>相关利用项目：</p>
<p>CMS识别：<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p>
<p>备份：敏感目录文件扫描-7kbscan-WebPathBrute</p>
<p>CVS：<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></p>
<p>GIT：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p>
<p>SVN：<a href="https://github.com/callmefeifei/SvnHack">https://github.com/callmefeifei/SvnHack</a></p>
<p>DS_Store：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p>
<p>常见的Web源码泄漏漏洞及其利用</p>
<p><a href="https://www.secpulse.com/archives/124398.html">https://www.secpulse.com/archives/124398.html</a></p>
<p>源码泄漏原因：</p>
<p>1、从源码本身的特性入口</p>
<p>2、从管理员不好的习惯入口</p>
<p>3、从管理员不好的配置入口</p>
<p>4、从管理员不好的意识入口</p>
<p>5、从管理员资源信息搜集入口</p>
<p>GITHUB资源搜索：</p>
<p>in:name test        #仓库标题搜索含有关键字 </p>
<p>in:descripton test     #仓库描述搜索含有关键字 </p>
<p>in:readme test       #Readme文件搜素含有关键字 </p>
<p>stars:&gt;3000 test      #stars数量大于3000的搜索关键字 </p>
<p>stars:1000..3000 test   #stars数量大于1000小于3000的搜索关键字 forks:&gt;1000 test      #forks数量大于1000的搜索关键字 </p>
<p>forks:1000..3000 test   #forks数量大于1000小于3000的搜索关键字 size:&gt;&#x3D;5000 test      #指定仓库大于5000k(5M)的搜索关键字 pushed:&gt;2019-02-12 test  #发布时间大于2019-02-12的搜索关键字 created:&gt;2019-02-12 test  #创建时间大于2019-02-12的搜索关键字 user:test         #用户名搜素 </p>
<p>license:apache-2.0 test  #明确仓库的 LICENSE 搜索关键字 language:java test     #在java语言的代码中搜索关键字 </p>
<p>user:test in:name test   #组合搜索,用户名test的标题含有test的</p>
<p>关键字配合谷歌搜索：</p>
<p>site:Github.com smtp  </p>
<p>site:Github.com smtp @qq.com  </p>
<p>site:Github.com smtp @126.com  </p>
<p>site:Github.com smtp @163.com  </p>
<p>site:Github.com smtp @sina.com.cn </p>
<p>site:Github.com smtp password </p>
<p>site:Github.com String password smtp</p>
]]></content>
  </entry>
</search>
